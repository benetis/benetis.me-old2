<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Learning on Typical personal blog</title>
    <link>https://benetis.me/old/tags/learning/</link>
    <description>Recent content in Learning on Typical personal blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; All rights reserved</copyright>
    <lastBuildDate>Sun, 15 Jan 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://benetis.me/old/tags/learning/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>HTML5 Canvas. Fundamentals</title>
      <link>https://benetis.me/old/posts/html5-canvas-fundamentals/</link>
      <pubDate>Sun, 15 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://benetis.me/old/posts/html5-canvas-fundamentals/</guid>
      <description>Introduction Today I met HTML5 Canvas. Not in real world - but during one the exercises from Javascript30. What are those &amp;ldquo;canvas&amp;rdquo;?
Basics Canvas is a HTML element used to draw graphics on fly via Javascript - [0]. Main idea is that you have this rectangle box on the page without any content and you use javascript to draw stuff on it. You do drawing by interacting with context object not the actual canvas object.</description>
    </item>
    
    <item>
      <title>Vanilla Javascript challenge</title>
      <link>https://benetis.me/old/posts/vanilla-javascript-challenge/</link>
      <pubDate>Sat, 10 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://benetis.me/old/posts/vanilla-javascript-challenge/</guid>
      <description>Challenge Today while reading dev news I came across a 30 days Vanilla JS challenge. Idea is simple - there are 30 &amp;ldquo;tasks&amp;rdquo; you need to complete. The catch? You cannot use any libraries, compilers (lodash, jquery, react, typescript, angular..). In other words - we can only use vanilla js.
In my humble opinion this a great way to practice javascript. We are using tons of libraries, precompilers, postcompilers .</description>
    </item>
    
    <item>
      <title>Let&#39;s code: Learning Haskell #1</title>
      <link>https://benetis.me/old/posts/lets-code-learning-haskell-1/</link>
      <pubDate>Sun, 04 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://benetis.me/old/posts/lets-code-learning-haskell-1/</guid>
      <description>Introduction Last week has been very immutable for me. I was looking into redux, Elm, React - just the ideas and trying to implement something similar for Angular.
For few years I have had a keen interest into functional programming and considered myself a good in the field. You know - using higher order functions, understand why null is evil - so code produced by me was &amp;ldquo;fairly&amp;rdquo; functional. Avoiding state, writing functions as pure as possible.</description>
    </item>
    
    <item>
      <title>Quick glimpse at world of Elm</title>
      <link>https://benetis.me/old/posts/quick-glimpse-at-world-of-elm/</link>
      <pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://benetis.me/old/posts/quick-glimpse-at-world-of-elm/</guid>
      <description>Intro Recently I have came across a thing called Elm. It is a functional programming language dedicated to frontend.
About language itself  Functional language You will not have to worry about state mutations No runtime errors. I&amp;rsquo;ll just leave that here Friendly and helpful community. Go to slack, try talking - not only you will get your answers - but community will make you feel part of it Simplicity.</description>
    </item>
    
  </channel>
</rss>